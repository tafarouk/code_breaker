{
  "meta": {
    "lang": "ar",
    "rtl": true
  },
  "ui.run": "تشغيل",
  "ui.hint": "تلميح",
  "ui.pass": "نجاح",
  "ui.fail": "فشل",
  "ui.stdout": "المخرجات",
  "ui.stderr": "الأخطاء",
  "puzzle.L1-P3.title": "موجه الأمان: هل لديك صلاحية؟",
  "puzzle.L1-P3.intro": "استخدم if/else. إذا كان access == 'y' فافتح الباب.",
  "puzzle.L2-P3.title": "تجاوز العقد الفخ",
  "puzzle.L2-P3.intro": "اكتب دالة safe_nodes(traps) تُرجع قائمة العقد من 1..10 مع استثناء العقد الموجودة في traps.",
  "puzzle.L3-P1.title": "عرّف أول دالة لك",
  "puzzle.L3-P1.intro": "اكتب دالة disable_drone() التي تطبع: EMP blast triggered. Drone disabled.",
  "hint.if_else": "استخدم if/else للتفرع حسب قيمة access.",
  "hint.missing_colon": "تذكر وضع النقطتين ':' بعد if/def/for.",
  "hint.for_loop": "كرر على range(1, 11) وتجاوز العقد الفخ.",
  "hint.list_comprehension": "جرّب [n for n in range(1, 11) if n not in traps].",
  "hint.def_function": "عرّف الدالة هكذا: def disable_drone():",
  "hint.print_inside": "استخدم print() داخل الدالة.",
  "hint.call_function": "لا تنس استدعاء الدالة في النهاية.",
  "fmt.door_unlocked": "تم فتح الباب {id}",
  "fmt.nodes_enabled": "تم تفعيل العقد الآمنة وتجاوز الفخاخ",
  "fmt.drone_disabled": "تم تعطيل الطائرة {id} بواسطة نبضة كهرومغناطيسية",
  "fmt.signal_cleaned": "تم تنقية الإشارة {id} وإرسالها",
  "puzzle.L2-P1.title": "مسح العقد",
  "puzzle.L2-P1.intro": "استخدم حلقة for لتعطيل العقد من 1 إلى 5 (اطبع: 'Node X disabled').",
  "puzzle.L3-P2.title": "تضخيم الإشارة",
  "puzzle.L3-P2.intro": "اكتب amplify(msg, times) التي تُرجع msg مكررة بعدد times دون مسافات.",
  "puzzle.L3-P3.title": "نقِّ إشارة الزعيم",
  "puzzle.L3-P3.intro": "اكتب clean_signal(signal) التي تعيد فقط الحروف من signal مع إزالة أي محارف أخرى.",
  "puzzle.L3-BOSS.title": "الزعيم: تنقية الإشارة",
  "puzzle.L3-BOSS.intro": "اكتب clean_signal(s) بحيث تبقي الحروف/الأرقام/المسافات فقط، وتدمج المسافات الزائدة، وتُعيد النص بأحرف كبيرة.",
  "hint.range": "استخدم range(1, 6) لتشمل 5.",
  "hint.print_format": "استخدم print(f\"Node {n} disabled\").",
  "hint.params": "عرّف معاملات الدالة: def fn(a, b):",
  "hint.return_value": "أعد القيمة باستخدام 'return' ولا تستخدم الطباعة.",
  "hint.str_methods": "دوال السلاسل: .isalnum() و .split() و .join() و .upper().",
  "hint.collapse_spaces": "استخدم \" \".join(s.split()) لدمج المسافات المتتالية.",
  "hint.upper": "استخدم s.upper() لتحويل الأحرف إلى كبيرة.",
  "hint.isalnum": "رشّح المحارف بـ ch.isalnum() أو ch == ' '."
}
