{
  "meta": {
    "lang": "fr",
    "rtl": false
  },
  "ui.run": "Exécuter",
  "ui.hint": "Indice",
  "ui.pass": "Réussi",
  "ui.fail": "Échec",
  "ui.stdout": "Sortie",
  "ui.stderr": "Erreurs",
  "puzzle.L1-P3.title": "Invite de sécurité : avez-vous l’accès ?",
  "puzzle.L1-P3.intro": "Répondez avec if/else. Si access == 'y', déverrouillez la porte.",
  "puzzle.L2-P3.title": "Contourner les nœuds piégés",
  "puzzle.L2-P3.intro": "Écrivez une fonction safe_nodes(traps) qui renvoie la liste des nœuds 1..10 en excluant ceux présents dans traps.",
  "puzzle.L3-P1.title": "Définissez votre première fonction",
  "puzzle.L3-P1.intro": "Écrivez une fonction disable_drone() qui affiche : EMP blast triggered. Drone disabled.",
  "hint.if_else": "Utilisez if/else pour basculer selon la valeur de access.",
  "hint.missing_colon": "N’oubliez pas les deux-points « : » après if/def/for.",
  "hint.for_loop": "Bouclez sur range(1, 11) et ignorez les pièges.",
  "hint.list_comprehension": "Essayez [n for n in range(1, 11) if n not in traps].",
  "hint.def_function": "Définissez ainsi : def disable_drone():",
  "hint.print_inside": "Utilisez print() à l’intérieur de la fonction.",
  "hint.call_function": "N’oubliez pas d’APPELER la fonction à la fin.",
  "fmt.door_unlocked": "Porte {id} déverrouillée",
  "fmt.nodes_enabled": "Nœuds sûrs activés, pièges ignorés",
  "fmt.drone_disabled": "Drone {id} désactivé par EMP"
}